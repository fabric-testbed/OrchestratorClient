# coding: utf-8

"""
    Fabric Orchestrator API

    This is Fabric Orchestrator API  # noqa: E501

    OpenAPI spec version: 1.0.1
    Contact: kthare10@unc.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoaDataInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'host': 'str',
        'host_info': 'str',
        'vm': 'str',
        'vm_info': 'str'
    }

    attribute_map = {
        'host': 'host',
        'host_info': 'host_info',
        'vm': 'vm',
        'vm_info': 'vm_info'
    }

    def __init__(self, host=None, host_info=None, vm=None, vm_info=None):  # noqa: E501
        """PoaDataInfo - a model defined in Swagger"""  # noqa: E501
        self._host = None
        self._host_info = None
        self._vm = None
        self._vm_info = None
        self.discriminator = None
        if host is not None:
            self.host = host
        if host_info is not None:
            self.host_info = host_info
        if vm is not None:
            self.vm = vm
        if vm_info is not None:
            self.vm_info = vm_info

    @property
    def host(self):
        """Gets the host of this PoaDataInfo.  # noqa: E501


        :return: The host of this PoaDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this PoaDataInfo.


        :param host: The host of this PoaDataInfo.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def host_info(self):
        """Gets the host_info of this PoaDataInfo.  # noqa: E501


        :return: The host_info of this PoaDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._host_info

    @host_info.setter
    def host_info(self, host_info):
        """Sets the host_info of this PoaDataInfo.


        :param host_info: The host_info of this PoaDataInfo.  # noqa: E501
        :type: str
        """

        self._host_info = host_info

    @property
    def vm(self):
        """Gets the vm of this PoaDataInfo.  # noqa: E501


        :return: The vm of this PoaDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._vm

    @vm.setter
    def vm(self, vm):
        """Sets the vm of this PoaDataInfo.


        :param vm: The vm of this PoaDataInfo.  # noqa: E501
        :type: str
        """

        self._vm = vm

    @property
    def vm_info(self):
        """Gets the vm_info of this PoaDataInfo.  # noqa: E501


        :return: The vm_info of this PoaDataInfo.  # noqa: E501
        :rtype: str
        """
        return self._vm_info

    @vm_info.setter
    def vm_info(self, vm_info):
        """Sets the vm_info of this PoaDataInfo.


        :param vm_info: The vm_info of this PoaDataInfo.  # noqa: E501
        :type: str
        """

        self._vm_info = vm_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoaDataInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoaDataInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
